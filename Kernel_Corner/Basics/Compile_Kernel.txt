###############################################################################################
##########			Compiling a Linux Kernel		             ##########
#########									       ########
########## Arun M Kumar					  arunkr.linux@gmail.com     ##########
###############################################################################################
______________________________________________________________________________________________
Last Edit:
09 Sep 2013				Arun M Kumar			arunkr.linux@gmail.com
______________________________________________________________________________________________
# Typos are regretted.

========================================== FAQ ==================================================

Although heavily documented, I shall try to explain the Kernel Building procedures to the best of my understanding.
This Doc shall help you Compile, Build and install a Custom kernel of your choice.

Q1. What this doc would provide?
A : Instructions on the build procedure, and their details.
    The packages that may be necessary.											


Q2. I want to add my changes to this Document.
A : Feel Free to do so..
    But edit it like a wiki.... add your Comments with your name.

Q3. I wanna know more.
A : Google what you wanna know. I shall also post what i know.
==================================================================================================


======================================== References ==============================================

	web:
		Kernelnewbies.org	(Highly recommended)

	books:
		Linux Kernel Development 3ed    - Robert Love	(Recomendded)
		Understanding the inux Kernel	
		Linux Device Drivers		- Greg Kroah Hartman	( intermediate level)
		Linux Kernel in a nutshell	- Greg Kroah Hartman	( for newbies)
		Embedded Linux Primer		- Christopher Hallinan	( Internediate level)

==================================================================================================


##$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    STEPS   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Step 0: Required Packages

-> There is a list of tools that you would require to build and compile the source.

	######## Ubuntu (Debian based system) #########
	The packages required are

	1. libncurses5-dev 
	2. gcc 
	3. make 
	4. git 
	5. exuberant-ctags

For begginers run the following command ( on UBUNTU)
	$ sudo apt-get install libncurses5-dev gcc make git exuberant-ctags

NOTE: based on your distribution you may need to use a different command, replace the 'apt-get' string with your package manager.


	######## Red Hat based system ############

	The packages required are

	1. gcc 
	2. make 
	3. git 
	4. ctags ncurses-devel

for begginers follow this ( On Fedora)
	$ sudo yum install gcc make git ctags ncurses-devel

(on OpenSuSE)
	$ sudo zypper install gcc make git ctags ncurses-devel


You shall be installing this packages as root, as otherwise its not allowed,
I STRONGLY RECCOMEND DOING THE REST OF THESE STEPS 'NOT AS ROOT'.
there was a bug with the kernel build system, and the build used to fail when launched as root
the developers did not face this problem since they mostly avoided building the kernel as root.
Although the problem is fixed.
DONT DO IT.




Step 1: Download the Source Tarball

	-> A tarball is a compressed directory (read .zip/ .rar file) containing data.
	-> A Source Tarball as the name suggests would give out source code when uncompressed.
	-> You can also clone the existing git repository.
	-> Cloning a GIT Repository (almost 1 GB, based on your internet speed this may take time)
   		shall give you all the files of the kernel with their history.


	######## To download a tarball ########

	1. go to http://kernel.org	
	2. choose the kernel version you want to download.
	3. Latest is not always the best, I would suggest Kernel Version 2.6, 3.4, 3.9. I hav efound them much easy to work with.
	4. After you download the tarball, extract it
	if the tarball is in the .tar.xz format use the following command
		$ tar -x <Tar File name>

	you may have to add ceratin flag to the command to make it work. I do this for example
		$ tar -xvf linux-3.11.tar.xz 

	--> for more details on these flag see the help section of the 'tar' utility
		$ tar --help


	####### To clone the repository ########

	1. Go the the directory where you do your development work.
   		I prefer /home/<your-uname>/Development/Linux_Kernel/
	2. Run this command (NOT AS ROOT)
   		$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
	
 NOTE: This can take a lot of time as there are more than 3300000 objects to be cloned,with a 280KB/s connection
       it took me around an hour and a half.
       It shal be also dependent upon the server that server the kernel repository.
       even if you have a broadband be ready for 3-4 KB/s sometimes.

FOR BEGGINERS... i would suggest go with the tarball option.



Step 2. Getting the kernel Ready.
	
	####### for those who have Downloaded the tarball... #########
	so you have your tarball, if you have cloned the repository i shall get back to you in a minute.
	change in to the extarceted directory.
	
	$ cd <extracted directory>

	for example on my system:

	$ cd linux-3.11


	####### for those who have cloned the GIT repo... #########
	

	1. Check the latest version available to you
		
			$ git tag -l				
				The last one shall be the latest, choose your preference.


	2. Now checkout the files for that particular version

			$ git checkout -b stable <tag>
				This creates a branch named stable with the contents of your specified version

				I did this on my system, i named my branch stable_3.9
				$ git checkout -b stable_3.9 v3.9
				
				once this is done the remaining steps are the same.
	 
 		
	3. Execute these commands
			

			$ make mrproper				<---- more details to be added ---->

				This command shal remove any previous temp files and configuration settings
				(not in your case if this is the first build, but for multiple builds from the 
				same tarball, this may be required).
				This command brings the kernel to the pristine form it was when you downloaded it.

			
			
			$ make defconfig			<---- Seperate document proposed ---->

				This is not as easy as it looks. It is the tip of the icebeg. This has been provided
				to ease out the build process.
				This builds the default configration with which your kernel shall be built.
				The default configuration are decided by the kernel maintainers.
				you can also give custom configuration. more on that later.

				$ make --help (for more such options)
				
				Q. Wil this affect the functionality in any way?
				A: It will surely, based on the configuration many faccilities may
				   be turned on/off in the kernel.
				   To have a look at the settings that have been selected run this command and look around.

				   $ make menuconfig

				   NOTE: Dont edit the file named '.config' using any text editor unless you know all the 
					dependencies of the kernel configurations.
					edit the configuration only through a configuration editor only.
					menuconfig, gconfig etc. are some examples.

				  	once you finish this process, you shall have a .config file. Its a Hiddeb file.
			          	back it up, if you want to preserve configuration in mutiple kernel builds.
				

					Dont forget to validate your config file against the current kernel
					run this command

					$ make oldconfig
						This command verifies the config file against the current kernel source.
					some features may have been removed in the new kernel, while its config parameters remain
					in the old configuration files, and those shall be handled accordingly.
					The Kernel Build system handes it pretty well too.
					
				Q. But i need all the current features. Give them to me !
				A: A very practical and justified request.
					The answer is even more straightforward . Copy the configuration file of the kernel that you
					are currently running.
				
					the current config file can be found in 
					
					/lib/modules/`uname -r`/build/
				
					the config file is a hidden file and thus shall not be available if you run the 'ls' utility.
					
					$ ls -a
						This will show you the .config file, copy it to the directory where you have your kernel
					source (GIT or Extracted Tarball).
					
					$ uname -r 
						This command gives the current kernel version and thus have been included in the path.
											
					The Directory named 'build' is a Symbolic link to the actual Source code.

					if the difference between the Kernel version of the running kernel and the kernel 
					version you wish to install is huge, i strongly suggest
					
					$ make oldconfig


			$ make
				or

			$ make -j n
				
				You can run any of it.
				NOTE: n = 2 * number of cores.

				This will launch the kernel build process.
				as you have provided the default configuration, this should not take much time.

				Q: what is this 'n' here?
				A: number of jobs (not steve jobs' family members ;P ).
				   To maximise the throughput during the build, we put 2 jobs on each CPU.
					
				   thus the modification of the command shall be
					
				   1. Single Core (Pentium series)		$ make -j 2 or $ make -j 3 (too much)
				   2. Dual Core (Pentium D, Core 2 duo) 	$ make -j 4 or $ make -j 5
				   3. Quad core (Core i5, core i7) 		$ make -j 8 or $ make -j 9

			 	on a Raspberry Pi, or BB, BBB follow accordingly.
			
				I have not tried this on AMD processors, with 8-10 cores,
				but you now know what command to give when you have multiple cores.
				nothing to worry about, modern CPUs handle these loads pretty well.

				NOTE: ALthough this build shall finish in say 25 min on a Quad core.
			      	It can take almost 40 min to an hour on a single core machine.
			     	The CPU will clock at 100% during the entire buid, so i suggest deferring 
			      	CPU intensive work during the process. (facebook is fine, have a sandwich,
			      	do your laundry, whatever, you shoud leave the build alone)
				
				Its not RAM Intensive, but have atleast 2GB for decent performance.

			     	Keep AMD based systems ventilated, i have seen them soaring to great temp.
			     	My Friends Laptop Shutdown during this process, due to heat generated.
			     	AMD is not to be blamed here, his HP laptop had bad vents and would heat up like
			     	anything.
			
				your fan might speed up,but dont worry these hardware problems are rare,
			     	just keep the laptop ventlated and you should be fine.
			     	needless to say, Desktops are best place for a build.

		
		$ make modules_install				<---- seperate document proposed ---->
						
			     	your modules have compiled, now lets install them into the kernel image.
			     	by the time you finish this you will have a Kernel Image at your hand.
			     	all you need to do is install it into the appropriate directory.


		$ make install					<----- more details to be added ---->

			    	This shall copy the images and the system map files in to appropriate directories.
			    	have a look at /boot. you will see new entries there.
				


		< Bootloader Issues>
			    	if you are using GRUB2 / GRUB1 then this shall not be required.
			    	Sadly i have no experience with this either, so i am textless as of now.



Step 3. Reboot.

Step 4. Choose your kernel and boot it.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
